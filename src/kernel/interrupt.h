#ifndef _INTERRUPT_H_
#define _INTERRUPT_H_

#include <stdint.h>
#include <stddef.h>

// Trap numbers
// These are processor defined:
#define T_DIVIDE	0	// divide error
#define T_DEBUG		1	// debug exception
#define T_NMI		2	// non-maskable interrupt
#define T_BRKPT		3	// breakpoint
#define T_OFLOW		4	// overflow
#define T_BOUND		5	// bounds check
#define T_ILLOP		6	// illegal opcode
#define T_DEVICE	7	// device not available
#define T_DBLFLT	8	// double fault
/* #define T_COPROC	9 */	// reserved (not generated by recent processors)
#define T_TSS		10	// invalid task switch segment
#define T_SEGNP		11	// segment not present
#define T_STACK		12	// stack exception
#define T_GPFLT		13	// general protection fault
#define T_PGFLT		14	// page fault
/* #define T_RES	15 */	// reserved
#define T_FPERR		16	// floating point error
#define T_ALIGN		17	// aligment check
#define T_MCHK		18	// machine check
#define T_SIMD		19	// SIMD floating point exception
#define T_SECEV		30	// Security-sensitive event

#define T_IRQ0		32	// Legacy ISA hardware interrupts: IRQ0-15.

// The rest are arbitrarily chosen, but with care not to overlap
// processor defined exceptions or ISA hardware interrupt vectors.
#define T_SYSCALL	48	// System call

// We use these vectors to receive local per-CPU interrupts
#define T_LTIMER	49	// Local APIC timer interrupt
#define T_LERROR	50	// Local APIC error interrupt

#define T_DEFAULT	500	// Unused trap vectors produce this value
#define T_ICNT		501	// Child process instruction count expired

// ISA hardware IRQ numbers. We receive these as (T_IRQ0 + IRQ_WHATEVER)
#define IRQ_TIMER	0	// 8253 Programmable Interval Timer (PIT)
#define IRQ_KBD		1	// Keyboard interrupt
#define IRQ_SERIAL	4	// Serial (COM) interrupt
#define IRQ_SPURIOUS	7	// Spurious interrupt
#define IRQ_IDE		14	// IDE disk controller interrupt

struct IDTDescriptor
{
   uint16_t offset_1; // offset bits 0..15
   uint16_t selector; // a code segment selector in GDT or LDT
   uint8_t ist;       // bits 0..2 holds Interrupt Stack Table offset, rest of bits zero.
   uint8_t type_attr; // type and attributes
   uint16_t offset_2; // offset bits 16..31
   uint32_t offset_3; // offset bits 32..63
   uint32_t zero;     // reserved
} __attribute__((packed));

class Interrupts
{
public:
	bool Initialize();
	void SetIRQHandler(int number, void (*pFunction)(void*), void* data);
	void SetExceptionHandler(int number, void (*handler)(uint64_t, uint64_t, uint64_t));

private:
	IDTDescriptor IDT[256];
	void SetIDT(int index, uint64_t address);
	void ClearIDT(int index);
};

#endif 
